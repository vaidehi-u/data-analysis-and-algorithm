# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Ohwq-fhkog9RaTSSop58LTTUyQ8hbDO
"""

#Project based on knn classification for Microsoft Engage
#Please refer to the text file attached for explanation

#importing libraries
import pandas as pd
import numpy as np
import random as rd
import matplotlib.pyplot as plt
from google.colab import drive

drive.mount('/content/drive')
path ='/content/drive/MyDrive/Colab Notebooks/countries.csv'
data=pd.read_csv(path)
data.head()
X = data[["longitude","latitude"]]

#number of clusters
K=3

# Select random observation as centroids
Centroids = (X.sample(n=K))
plt.scatter(X["latitude"],X["longitude"],c='black')
plt.scatter(Centroids["latitude"],Centroids["longitude"],c='red')
plt.xlabel('latitude')
plt.ylabel('longitude')
plt.show()

# Step 3 - Assign all the points to the closest cluster centroid
# Step 4 - Recompute centroids of newly formed clusters
# Step 5 - Repeat step 3 and 4
diff = 1
j=0

while(diff!=0):
  XD=X
  i=1
  for index1,row_c in Centroids.iterrows():
    ED=[]
    for index2,row_d in XD.iterrows():
      d1=(row_c["latitude"]-row_d["latitude"])**2
      d2=(row_c["longitude"]-row_d["longitude"])**2
      d=np.sqrt(d1+d2)
      ED.append(d)
    X[i]=ED
    i=i+1

  C=[]
  for index,row in X.iterrows():
    min_dist=row[1]
    pos=1
    for i in range(K):
      if row[i+1] < min_dist:
        min_dist = row[i+1]
        pos=i+1
    C.append(pos)
  X["Cluster"]=C
  Centroids_new =X.groupby(["Cluster"]).mean()[["longitude","latitude"]]
  if j == 0:
    diff=1
    j=j+1
  else:
    diff = (Centroids_new['longitude'] - Centroids['longitude']).sum() + (Centroids_new['latitude'] - Centroids['latitude']).sum()
# print(diff.sum())
  Centroids = X.groupby(["Cluster"]).mean()[["longitude","latitude"]]
color=['blue','green','yellow']
for k in range(K):
  data=X[X["Cluster"]==k+1]
  plt.scatter(data["latitude"],data["longitude"],c=color[k])
plt.scatter(Centroids["latitude"],Centroids["longitude"],c='red')
plt.xlabel('LONGITUDE')
plt.ylabel('LATITUDE')
plt.show()